name: Deploy to GCE with Docker

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Create .env file
      run: |
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "DB_HOST=db" >> .env
        echo "VAPID_PUBLIC=${{ secrets.VAPID_PUBLIC }}" >> .env
        echo "VAPID_PRIVATE=${{ secrets.VAPID_PRIVATE }}" >> .env

    - name: Build Docker image
      run: docker build -t min-backend .

    - name: Save Docker image to file
      run: docker save min-backend > min-backend.tar

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Copy Docker image to server
      run: |
        scp min-backend.tar ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/min-backend.tar

    - name: Load and run Docker on server
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          docker load < /tmp/min-backend.tar
          docker stop min-container || true
          docker rm min-container || true
          mkdir -p ~/min/uploads || true
          docker network create min || true
          docker run -d -p 5000:5000 --name min-container --restart unless-stopped --network min -v ~/min/uploads:/app/uploads -v ~/min/logs:/app/logs min-backend
          docker rmi $(docker images -f "dangling=true" -q) || true
        EOF
